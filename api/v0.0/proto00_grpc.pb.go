// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto00.proto

package proto00

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Linker_Info_FullMethodName        = "/Linker/Info"
	Linker_Subscribe_FullMethodName   = "/Linker/Subscribe"
	Linker_RequestVote_FullMethodName = "/Linker/RequestVote"
)

// LinkerClient is the client API for Linker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkerClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Heartbeat], error)
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteRes, error)
}

type linkerClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkerClient(cc grpc.ClientConnInterface) LinkerClient {
	return &linkerClient{cc}
}

func (c *linkerClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoRes)
	err := c.cc.Invoke(ctx, Linker_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Heartbeat], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Linker_ServiceDesc.Streams[0], Linker_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeReq, Heartbeat]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Linker_SubscribeClient = grpc.ServerStreamingClient[Heartbeat]

func (c *linkerClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteRes)
	err := c.cc.Invoke(ctx, Linker_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkerServer is the server API for Linker service.
// All implementations must embed UnimplementedLinkerServer
// for forward compatibility.
type LinkerServer interface {
	Info(context.Context, *InfoReq) (*InfoRes, error)
	Subscribe(*SubscribeReq, grpc.ServerStreamingServer[Heartbeat]) error
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteRes, error)
	mustEmbedUnimplementedLinkerServer()
}

// UnimplementedLinkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkerServer struct{}

func (UnimplementedLinkerServer) Info(context.Context, *InfoReq) (*InfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedLinkerServer) Subscribe(*SubscribeReq, grpc.ServerStreamingServer[Heartbeat]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedLinkerServer) RequestVote(context.Context, *RequestVoteReq) (*RequestVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedLinkerServer) mustEmbedUnimplementedLinkerServer() {}
func (UnimplementedLinkerServer) testEmbeddedByValue()                {}

// UnsafeLinkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkerServer will
// result in compilation errors.
type UnsafeLinkerServer interface {
	mustEmbedUnimplementedLinkerServer()
}

func RegisterLinkerServer(s grpc.ServiceRegistrar, srv LinkerServer) {
	// If the following call pancis, it indicates UnimplementedLinkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Linker_ServiceDesc, srv)
}

func _Linker_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Linker_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LinkerServer).Subscribe(m, &grpc.GenericServerStream[SubscribeReq, Heartbeat]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Linker_SubscribeServer = grpc.ServerStreamingServer[Heartbeat]

func _Linker_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Linker_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Linker_ServiceDesc is the grpc.ServiceDesc for Linker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Linker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Linker",
	HandlerType: (*LinkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Linker_Info_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Linker_RequestVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Linker_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto00.proto",
}
